{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAqCA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAAUC,KAC5BC,YAAW,KACLN,EACFI,EAAS,C,SAAEN,E,MAAUC,IAErBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA5CGQ,SAASC,cAAc,SAC/BC,iBAAiB,UAEzB,SAAsBC,GACpBA,EAAMC,iBACN,MAAMZ,MAAEA,EAAKa,KAAEA,EAAIC,OAAEA,GAAWH,EAAMI,cAAcC,SAEpD,IAAIC,GAAcjB,EAAMkB,MACxB,MAAMC,GAAaN,EAAKK,MAClBE,GAAeN,EAAOI,MAE5B,GAAID,EAAa,GAAKG,EAAc,GAAKD,EAAY,EAEnD,YADAvB,EAAAyB,OAAOC,QAAQ,sBASnB,SAAyBC,EAAOV,EAAMC,GACpC,IAAK,IAAIU,EAAI,EAAGA,GAAKV,EAAQU,IAC3B1B,EAAc0B,EAAGD,GACdE,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBJ,EAAAyB,OAAOK,QAAQ,uBAAqB3B,QAAiBC,MAAU,IAEhE2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAAyB,OAAOO,QAAQ,sBAAoB7B,QAAeC,MAAU,IAEhEuB,GAASV,C,EAdXgB,CAAgBZ,EAAYE,EAAWC,GACvCT,EAAMI,cAAce,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\nformRef.addEventListener('submit', getInputData);\n\nfunction getInputData(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.currentTarget.elements;\n\n  let delayValue = +delay.value;\n  const stepValue = +step.value;\n  const amountValue = +amount.value;\n\n  if (delayValue < 0 || amountValue < 0 || stepValue < 0) {\n    Notify.warning('input \">0\" values');\n    return;\n  }\n\n  registerPromise(delayValue, stepValue, amountValue);\n  event.currentTarget.reset();\n}\n\n// Registering promise callbacks\nfunction registerPromise(delay, step, amount) {\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n}\n\n// Creating promise\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((response, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        response({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","response","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","step","amount","currentTarget","elements","delayValue","value","stepValue","amountValue","Notify","warning","delay1","i","then","success","catch","failure","$47d4ff9957288465$var$registerPromise","reset"],"version":3,"file":"03-promises.89e44cda.js.map"}