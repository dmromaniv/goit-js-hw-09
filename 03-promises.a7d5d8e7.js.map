{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAqCA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAAUC,GAC5BC,YAAW,WACLN,EACFI,EAAS,CAAEN,WAAUC,UAErBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IA5CSQ,SAASC,cAAc,SAC/BC,iBAAiB,UAEzB,SAAsBC,GACpBA,EAAMC,iBACN,IAAgCC,EAAAF,EAAMG,cAAcC,SAA5Cf,EAAwBa,EAAxBb,MAAOgB,EAAiBH,EAAjBG,KAAMC,EAAWJ,EAAXI,OAEjBC,GAAclB,EAAMmB,MAClBC,GAAaJ,EAAKG,MAClBE,GAAeJ,EAAOE,MAE5B,GAAID,EAAa,GAAKG,EAAc,GAAKD,EAAY,EAEnD,YADAxB,EAAA0B,OAAOC,QAAQ,sBASnB,SAAyBvB,EAAOgB,EAAMC,GACpC,IAAK,IAAIO,EAAI,EAAGA,GAAKP,EAAQO,IAC3B1B,EAAc0B,EAAGxB,GACdyB,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAU4B,EAAKD,EAAL1B,MACjBJ,EAAA0B,OAAOM,QAAQ,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAANF,EAAM,M,IAE9DG,OAAM,SAAAJ,G,IAAG3B,EAAQ2B,EAAR3B,SAAU4B,EAAKD,EAAL1B,MAClBJ,EAAA0B,OAAOS,QAAQ,sBAAqCF,OAAf9B,EAAS,QAAY8B,OAANF,EAAM,M,IAE9D3B,GAASgB,C,EAdXgB,CAAgBd,EAAYE,EAAWC,GACvCV,EAAMG,cAAcmB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\nformRef.addEventListener('submit', getInputData);\n\nfunction getInputData(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.currentTarget.elements;\n\n  let delayValue = +delay.value;\n  const stepValue = +step.value;\n  const amountValue = +amount.value;\n\n  if (delayValue < 0 || amountValue < 0 || stepValue < 0) {\n    Notify.warning('input \">0\" values');\n    return;\n  }\n\n  registerPromise(delayValue, stepValue, amountValue);\n  event.currentTarget.reset();\n}\n\n// Registering promise callbacks\nfunction registerPromise(delay, step, amount) {\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n}\n\n// Creating promise\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((response, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        response({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","response","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","step","amount","delayValue","value","stepValue","amountValue","Notify","warning","i","then","param","_$delay","success","concat","catch","failure","$ce04d3a99e08e73b$var$registerPromise","reset"],"version":3,"file":"03-promises.a7d5d8e7.js.map"}